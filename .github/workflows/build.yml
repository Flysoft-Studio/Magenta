name: Build

on: push

env:
    CARGO_TERM_COLOR: always

jobs:
    build:
        strategy:
            matrix:
                os: [windows-latest, ubuntu-22.04, macos-latest]

        runs-on: ${{ matrix.os }}
        permissions:
            pages: write
            id-token: write
            contents: read
        steps:
            - uses: actions/checkout@v3

            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18.x

            - name: Use Yarn
              run: npm install yarn -g

            - name: Install dependencies (Linux)
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libc6-dev libgtk-3-dev libwebkit2gtk-4.0-dev libglib2.0-dev libssl-dev librsvg2-dev libatk1.0-dev libappindicator3-dev libappindicator-dev libgdk3.0-cil libgdk3.0-cil

            - name: Add Rust build targets (Windows)
              if: runner.os == 'Windows'
              run: |
                  rustup target add aarch64-pc-windows-msvc
                  rustup target add i686-pc-windows-msvc
                  rustup target add x86_64-pc-windows-msvc

            - name: Add Rust build targets (Linux)
              if: runner.os == 'Linux'
              run: |
                  rustup target add x86_64-unknown-linux-gnu

            - name: Add Rust build targets (macOS)
              if: runner.os == 'macOS'
              run: |
                  rustup target add aarch64-apple-darwin
                  rustup target add x86_64-apple-darwin

            - name: Get Yarn cache directory path (Windows)
              if: runner.os == 'Windows'
              run: echo "yarn_cache_dir=$(yarn cache dir)" >> $env:GITHUB_ENV

            - name: Get Yarn cache directory path (non-Windows)
              if: runner.os != 'Windows'
              run: echo "yarn_cache_dir=$(yarn cache dir)" >> $GITHUB_ENV

            - name: Cache Yarn dependencies
              id: yarn-cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.yarn_cache_dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Cache Cargo dependencies
              id: cargo-cache
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cargo/bin/
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                      src-tauri/target/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Run install
              run: yarn install --prefer-offline

            - name: Build app
              run: yarn run tauri:build

            - name: Upload pages artifact
              if: github.ref == 'refs/heads/main'
              uses: actions/upload-pages-artifact@v1
              with:
                  path: "build"

            - name: Deploy to GitHub Pages
              if: github.ref == 'refs/heads/main'
              uses: actions/deploy-pages@v1

            - name: Upload dist (Windows, Setup)
              if: runner.os == 'Windows'
              uses: actions/upload-artifact@v3
              with:
                  name: win32-setup
                  path: "out/*-setup-*.exe"

            - name: Upload dist (Windows, MSI)
              if: runner.os == 'Windows'
              uses: actions/upload-artifact@v3
              with:
                  name: win32-msi
                  path: "out/*-setup-msi-*.msi"

            - name: Upload dist (Windows, Standalone)
              if: runner.os == 'Windows'
              uses: actions/upload-artifact@v3
              with:
                  name: win32-standalone
                  path: "out/*-standalone-*.exe"

            - name: Upload dist (Linux, Deb)
              if: runner.os == 'Linux'
              uses: actions/upload-artifact@v3
              with:
                  name: linux-deb
                  path: "out/*.deb"

            - name: Upload dist (Linux, AppImage)
              if: runner.os == 'Linux'
              uses: actions/upload-artifact@v3
              with:
                  name: linux-appimage
                  path: "out/*.AppImage"

            - name: Upload dist (macOS)
              if: runner.os == 'macOS'
              uses: actions/upload-artifact@v3
              with:
                  name: macos-dmg
                  path: "out/*.dmg"

            - name: Create release
              if: startsWith(github.ref, 'refs/tags/v')
              uses: softprops/action-gh-release@v1
              with:
                  files: out/*
                  generate_release_notes: true
                  append_body: false

            # - name: Download uploader
            #   uses: robinraju/release-downloader@v1.6
            #   with:
            #       repository: ${{ secrets.UPLOADER_RES_REPO }}
            #       tag: uploader
            #       fileName: upload.tar.gz

            # - name: Upload dist to server
            #   run: |
            #       mkdir upload
            #       tar -z -xf upload.tar.gz -C upload
            #       node ./upload/build/main.js "./out" "magenta-player-${{ runner.os }}" "${{ secrets.UPLOADER_SECRET }}.zip"
